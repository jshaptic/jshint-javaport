package org.jshint;

import java.util.Map;

import com.google.common.collect.ImmutableMap;

public class Messages {
	private Messages() {
	}

	// ERROR MESSAGES
	public static final Map<String, String> errors = ImmutableMap.<String, String>builder()

			// JSHint options
			.put("E001", "Bad {a}option: '{b}'.")
			.put("E002", "Bad option value.")

			// JSHint input
			.put("E003", "Expected a JSON value.")
			.put("E004", "Input is neither a string nor an array of strings.")
			.put("E005", "Input is empty.")
			.put("E006", "Unexpected early end of program.")

			// Strict mode
			.put("E007", "Missing \"use strict\" statement.")
			.put("E008", "Strict violation.")
			.put("E009", "Option 'validthis' can't be used in a global scope.")
			.put("E010", "'with' is not allowed in strict mode.")

			// Constants
			.put("E011", "'{a}' has already been declared.")
			.put("E012", "const '{a}' is initialized to 'undefined'.")
			.put("E013", "Attempting to override '{a}' which is a constant.")

			// Regular expressions
			.put("E014", "A regular expression literal can be confused with '/='.")
			.put("E015", "Unclosed regular expression.")
			.put("E016", "Invalid regular expression.")

			// Tokens
			.put("E017", "Unclosed comment.")
			.put("E018", "Unbegun comment.")
			.put("E019", "Unmatched '{a}'.")
			.put("E020", "Expected '{a}' to match '{b}' from line {c} and instead saw '{d}'.")
			.put("E021", "Expected '{a}' and instead saw '{b}'.")
			.put("E022", "Line breaking error '{a}'.")
			.put("E023", "Missing '{a}'.")
			.put("E024", "Unexpected '{a}'.")
			.put("E025", "Missing ':' on a case clause.")
			.put("E026", "Missing '}' to match '{' from line {a}.")
			.put("E027", "Missing ']' to match '[' from line {a}.")
			.put("E028", "Illegal comma.")
			.put("E029", "Unclosed string.")

			// Everything else
			.put("E030", "Expected an identifier and instead saw '{a}'.")
			.put("E031", "Bad assignment.") // JSHINT_FIXME: Rephrase
			.put("E032", "Expected a small integer or 'false' and instead saw '{a}'.")
			.put("E033", "Expected an operator and instead saw '{a}'.")
			.put("E034", "get/set are ES5 features.")
			.put("E035", "Missing property name.")
			.put("E036", "Expected to see a statement and instead saw a block.")
			.put("E037", "")
			.put("E038", "")
			.put("E039", "Function declarations are not invocable. Wrap the whole function invocation in parens.")
			.put("E040", "Each value should have its own case label.")
			.put("E041", "Unrecoverable syntax error.")
			.put("E042", "Stopping.")
			.put("E043", "Too many errors.")
			.put("E044", "")
			.put("E045", "Invalid for each loop.")
			.put("E046", "Yield expressions may only occur within generator functions.")
			.put("E047", "")
			.put("E048", "{a} declaration not directly within block.")
			.put("E049", "A {a} cannot be named '{b}'.")
			.put("E050", "Mozilla requires the yield expression to be parenthesized here.")
			.put("E051", "")
			.put("E052", "Unclosed template literal.")
			.put("E053", "{a} declarations are only allowed at the top level of module scope.")
			.put("E054", "Class properties must be methods. Expected '(' but instead saw '{a}'.")
			.put("E055", "The '{a}' option cannot be set after any executable code.")
			.put("E056", "'{a}' was used before it was declared, which is illegal for '{b}' variables.")
			.put("E057", "Invalid meta property: '{a}.{b}'.")
			.put("E058", "Missing semicolon.")
			.put("E059", "Incompatible values for the '{a}' and '{b}' linting options.")
			.put("E060", "Non-callable values cannot be used as the second operand to instanceof.")
			.put("E061", "Invalid position for 'yield' expression (consider wrapping in parenthesis).")
			.put("E062", "Rest parameter does not a support default value.")
			.put("E063", "Super property may only be used within method bodies.")
			.put("E064", "Super call may only be used within class method bodies.")
			.put("E065",
					"Functions defined outside of strict mode with non-simple parameter lists may not enable strict mode.")
			.put("E066", "Asynchronous iteration is only available with for-of loops.")
			.put("E067", "Malformed numeric literal: '{a}'.")
			.put("E068", "Decimals with leading zeros are not allowed in strict mode.")
			.put("E069", "Duplicate exported binding: '{a}'.")
			.put("E070", "import.meta may only be used in module code.")
			.build();

	// WARNING MESSAGES
	public static final Map<String, String> warnings = ImmutableMap.<String, String>builder()
			.put("W001", "'hasOwnProperty' is a really bad name.")
			.put("W002", "Value of '{a}' may be overwritten in IE 8 and earlier.")
			.put("W003", "'{a}' was used before it was defined.")
			.put("W004", "'{a}' is already defined.")
			.put("W005", "A dot following a number can be confused with a decimal point.")
			.put("W006", "Confusing minuses.")
			.put("W007", "Confusing plusses.")
			.put("W008", "A leading decimal point can be confused with a dot: '{a}'.")
			.put("W009", "The array literal notation [] is preferable.")
			.put("W010", "The object literal notation {} is preferable.")
			.put("W011", "")
			.put("W012", "")
			.put("W013", "")
			.put("W014", "Misleading line break before '{a}'; readers may interpret this as an expression boundary.")
			.put("W015", "")
			.put("W016", "Unexpected use of '{a}'.")
			.put("W017", "Bad operand.")
			.put("W018", "Confusing use of '{a}'.")
			.put("W019", "Use the isNaN function to compare with NaN.")
			.put("W020", "Read only.")
			.put("W021",
					"Reassignment of '{a}', which is a {b}. Use 'var' or 'let' to declare bindings that may change.")
			.put("W022", "Do not assign to the exception parameter.")
			.put("W023", "")
			.put("W024", "Expected an identifier and instead saw '{a}' (a reserved word).")
			.put("W025", "Missing name in function declaration.")
			.put("W026", "Inner functions should be listed at the top of the outer function.")
			.put("W027", "Unreachable '{a}' after '{b}'.")
			.put("W028", "Label '{a}' on {b} statement.")
			.put("W030", "Expected an assignment or function call and instead saw an expression.")
			.put("W031", "Do not use 'new' for side effects.")
			.put("W032", "Unnecessary semicolon.")
			.put("W033", "Missing semicolon.")
			.put("W034", "Unnecessary directive \"{a}\".")
			.put("W035", "Empty block.")
			.put("W036", "Unexpected /*member '{a}'.")
			.put("W037", "'{a}' is a statement label.")
			.put("W038", "'{a}' used out of scope.")
			.put("W039", "")
			.put("W040",
					"If a strict mode function is executed using function invocation, its 'this' value will be undefined.")
			.put("W041", "")
			.put("W042", "Avoid EOL escaping.")
			.put("W043", "Bad escaping of EOL. Use option multistr if needed.")
			.put("W044", "Bad or unnecessary escaping.") /* JSHINT_TODO(caitp): remove W044 */
			.put("W045",
					"Value described by numeric literal cannot be accurately "
							+ "represented with a number value: '{a}'.")
			.put("W046", "Don't use extra leading zeros '{a}'.")
			.put("W047", "A trailing decimal point can be confused with a dot: '{a}'.")
			.put("W048", "Unexpected control character in regular expression.")
			.put("W049", "Unexpected escaped character '{a}' in regular expression.")
			.put("W050", "JavaScript URL.")
			.put("W051", "Variables should not be deleted.")
			.put("W052", "Unexpected '{a}'.")
			.put("W053", "Do not use {a} as a constructor.")
			.put("W054", "The Function constructor is a form of eval.")
			.put("W055", "A constructor name should start with an uppercase letter.")
			.put("W056", "Bad constructor.")
			.put("W057", "Weird construction. Is 'new' necessary?")
			.put("W058", "Missing '()' invoking a constructor.")
			.put("W059", "Avoid arguments.{a}.")
			.put("W060", "document.write can be a form of eval.")
			.put("W061", "eval can be harmful.")
			.put("W062",
					"Wrap an immediate function invocation in parens to assist the reader in understanding that the expression is the result of a function, and not the function itself.")
			.put("W063", "Math is not a function.")
			.put("W064", "Missing 'new' prefix when invoking a constructor.")
			.put("W065", "Missing radix parameter.")
			.put("W066", "Implied eval. Consider passing a function instead of a string.")
			.put("W067", "Unorthodox function invocation.")
			.put("W068", "Wrapping non-IIFE function literals in parens is unnecessary.")
			.put("W069", "['{a}'] is better written in dot notation.")
			.put("W070", "Extra comma. (it breaks older versions of IE)")
			.put("W071", "This function has too many statements. ({a})")
			.put("W072", "This function has too many parameters. ({a})")
			.put("W073", "Blocks are nested too deeply. ({a})")
			.put("W074", "This function's cyclomatic complexity is too high. ({a})")
			.put("W075", "Duplicate {a} '{b}'.")
			.put("W076", "Unexpected parameter '{a}' in get {b} function.")
			.put("W077", "Expected a single parameter in set {a} function.")
			.put("W078", "Setter is defined without getter.")
			.put("W079", "Redefinition of '{a}'.")
			.put("W080", "It's not necessary to initialize '{a}' to 'undefined'.")
			.put("W081", "")
			.put("W082",
					"Function declarations should not be placed in blocks. Use a function expression or move the statement to the top of the outer function.")
			.put("W083",
					"Functions declared within loops referencing an outer scoped variable may lead to confusing semantics. ({a})")
			.put("W084", "Expected a conditional expression and instead saw an assignment.")
			.put("W085", "Don't use 'with'.")
			.put("W086", "Expected a 'break' statement before '{a}'.")
			.put("W087", "Forgotten 'debugger' statement?")
			.put("W088", "Creating global 'for' variable. Should be 'for (var {a} ...'.")
			.put("W089",
					"The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype.")
			.put("W090", "'{a}' is not a statement label.")
			.put("W091", "")
			.put("W093", "Did you mean to return a conditional instead of an assignment?")
			.put("W094", "Unexpected comma.")
			.put("W095", "Expected a string and instead saw {a}.")
			.put("W096", "The '{a}' key may produce unexpected results.")
			.put("W097", "Use the function form of \"use strict\".")
			.put("W098", "'{a}' is defined but never used.")
			.put("W099", "")
			.put("W100", "")
			.put("W101", "Line is too long.")
			.put("W102", "")
			.put("W103", "The '{a}' property is deprecated.")
			.put("W104", "'{a}' is available in ES{b} (use 'esversion: {b}') or Mozilla JS extensions (use moz).")
			.put("W105", "")
			.put("W106", "Identifier '{a}' is not in camel case.")
			.put("W107", "Script URL.")
			.put("W108", "Strings must use doublequote.")
			.put("W109", "Strings must use singlequote.")
			.put("W110", "Mixed double and single quotes.")
			.put("W112", "Unclosed string.")
			.put("W113", "Control character in string: {a}.")
			.put("W114", "Avoid {a}.")
			.put("W115", "Octal literals are not allowed in strict mode.")
			.put("W116", "Expected '{a}' and instead saw '{b}'.")
			.put("W117", "'{a}' is not defined.")
			.put("W118", "'{a}' is only available in Mozilla JavaScript extensions (use moz option).")
			.put("W119", "'{a}' is only available in ES{b} (use 'esversion: {b}').")
			.put("W120", "You might be leaking a variable ({a}) here.")
			.put("W121", "Extending prototype of native object: '{a}'.")
			.put("W122", "Invalid typeof value '{a}'")
			.put("W123", "'{a}' is already defined in outer scope.")
			.put("W124", "A generator function should contain at least one yield expression.")
			.put("W125", "This line contains non-breaking spaces: http://jshint.com/docs/options/#nonbsp")
			.put("W126", "Unnecessary grouping operator.")
			.put("W127", "Unexpected use of a comma operator.")
			.put("W128", "Empty array elements require elision=true.")
			.put("W129",
					"'{a}' is defined in a future version of JavaScript. Use a different variable name to avoid migration issues.")
			.put("W130", "Invalid element after rest element.")
			.put("W131", "Invalid parameter after rest parameter.")
			.put("W132", "`var` declarations are forbidden. Use `let` or `const` instead.")
			.put("W133", "Invalid for-{a} loop left-hand-side: {b}.")
			.put("W134", "The '{a}' option is only available when linting ECMAScript {b} code.")
			.put("W135", "{a} may not be supported by non-browser environments.")
			.put("W136", "'{a}' must be in function scope.")
			.put("W137", "Empty destructuring: this is unnecessary and can be removed.")
			.put("W138", "Regular parameters should not come after default parameters.")
			.put("W139", "Function expressions should not be used as the second operand to instanceof.")
			.put("W140", "Missing comma.")
			.put("W141", "Empty {a}: this is unnecessary and can be removed.")
			.put("W142", "Empty {a}: consider replacing with `import '{b}';`.")
			.put("W143",
					"Assignment to properties of a mapped arguments object may cause unexpected changes to formal parameters.")
			.put("W144", "'{a}' is a non-standard language feature. Enable it using the '{b}' unstable option.")
			.put("W145", "Superfluous 'case' clause.")
			.put("W146", "Unnecessary `await` expression.")
			.put("W147", "Regular expressions should include the 'u' flag.")
			.put("W148", "Unnecessary RegExp 's' flag.")
			.build();

	// INFO MESSAGES
	public static final Map<String, String> info = ImmutableMap.<String, String>builder()
			.put("I001", "Comma warnings can be turned off with 'laxcomma'.")
			.put("I002", "")
			.put("I003", "ES5 option is now set per default")
			.build();
}