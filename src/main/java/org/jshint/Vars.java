package org.jshint;

import java.util.Map;

import com.google.common.collect.ImmutableMap;

public class Vars {
	private Vars() {
	}

	// Identifiers provided by the ECMAScript standard.

	public static final Map<String, Boolean> reservedVars = ImmutableMap.<String, Boolean>builder()
			.put("NaN", false)
			.put("undefined", false)
			.build();

	public static final Map<Integer, Map<String, Boolean>> ecmaIdentifiers = ImmutableMap
			.<Integer, Map<String, Boolean>>builder()
			.put(3, ImmutableMap.<String, Boolean>builder()
					.put("Array", false)
					.put("Boolean", false)
					.put("Date", false)
					.put("decodeURI", false)
					.put("decodeURIComponent", false)
					.put("encodeURI", false)
					.put("encodeURIComponent", false)
					.put("Error", false)
					.put("eval", false)
					.put("EvalError", false)
					.put("Function", false)
					.put("hasOwnProperty", false)
					.put("Infinity", false)
					.put("isFinite", false)
					.put("isNaN", false)
					.put("Math", false)
					.put("Number", false)
					.put("Object", false)
					.put("parseInt", false)
					.put("parseFloat", false)
					.put("RangeError", false)
					.put("ReferenceError", false)
					.put("RegExp", false)
					.put("String", false)
					.put("SyntaxError", false)
					.put("TypeError", false)
					.put("URIError", false)
					.build())
			.put(5, ImmutableMap.<String, Boolean>builder()
					.put("JSON", false)
					.build())
			.put(6, ImmutableMap.<String, Boolean>builder()
					.put("ArrayBuffer", false)
					.put("DataView", false)
					.put("Float32Array", false)
					.put("Float64Array", false)
					.put("Int8Array", false)
					.put("Int16Array", false)
					.put("Int32Array", false)
					.put("Map", false)
					.put("Promise", false)
					.put("Proxy", false)
					.put("Reflect", false)
					.put("Set", false)
					.put("Symbol", false)
					.put("Uint8Array", false)
					.put("Uint16Array", false)
					.put("Uint32Array", false)
					.put("Uint8ClampedArray", false)
					.put("WeakMap", false)
					.put("WeakSet", false)
					.build())
			.put(8, ImmutableMap.<String, Boolean>builder()
					.put("Atomics", false)
					.put("SharedArrayBuffer", false)
					.build())
			.put(11, ImmutableMap.<String, Boolean>builder()
					.put("BigInt", false)
					.put("globalThis", false)
					.build())
			.build();

	// Global variables commonly provided by a web browser environment.

	public static final Map<String, Boolean> browser = ImmutableMap.<String, Boolean>builder()
			.put("Audio", false)
			.put("Blob", false)
			.put("addEventListener", false) // EventTarget
			.put("applicationCache", false)
			.put("atob", false) // WindowOrWorkerGlobalScope
			.put("blur", false)
			.put("btoa", false) // WindowOrWorkerGlobalScope
			.put("cancelAnimationFrame", false)
			.put("CanvasGradient", false)
			.put("CanvasPattern", false)
			.put("CanvasRenderingContext2D", false)
			.put("CSS", false)
			.put("CSSImportRule", false)
			.put("CSSGroupingRule", false)
			.put("CSSMarginRule", false)
			.put("CSSMediaRule", false)
			.put("CSSNamespaceRule", false)
			.put("CSSPageRule", false)
			.put("CSSRule", false)
			.put("CSSRuleList", false)
			.put("CSSStyleDeclaration", false)
			.put("CSSStyleRule", false)
			.put("CSSStyleSheet", false)
			.put("clearInterval", false) // WindowOrWorkerGlobalScope
			.put("clearTimeout", false) // WindowOrWorkerGlobalScope
			.put("close", false)
			.put("closed", false)
			.put("Comment", false)
			.put("CompositionEvent", false)
			.put("createImageBitmap", false) // WindowOrWorkerGlobalScope
			.put("CustomEvent", false)
			.put("DOMParser", false)
			.put("defaultStatus", false)
			.put("dispatchEvent", false) // EventTarget
			.put("Document", false)
			.put("document", false)
			.put("DocumentFragment", false)
			.put("Element", false)
			.put("ElementTimeControl", false)
			.put("Event", false)
			.put("event", false)
			.put("fetch", false)
			.put("File", false)
			.put("FileList", false)
			.put("FileReader", false)
			.put("FormData", false)
			.put("focus", false)
			.put("frames", false)
			.put("getComputedStyle", false)
			.put("Headers", false)
			.put("HTMLAnchorElement", false)
			.put("HTMLAreaElement", false)
			.put("HTMLAudioElement", false)
			.put("HTMLBaseElement", false)
			.put("HTMLBlockquoteElement", false)
			.put("HTMLBodyElement", false)
			.put("HTMLBRElement", false)
			.put("HTMLButtonElement", false)
			.put("HTMLCanvasElement", false)
			.put("HTMLCollection", false)
			.put("HTMLDataElement", false)
			.put("HTMLDataListElement", false)
			.put("HTMLDetailsElement", false)
			.put("HTMLDialogElement", false)
			.put("HTMLDirectoryElement", false)
			.put("HTMLDivElement", false)
			.put("HTMLDListElement", false)
			.put("HTMLElement", false)
			.put("HTMLEmbedElement", false)
			.put("HTMLFieldSetElement", false)
			.put("HTMLFontElement", false)
			.put("HTMLFormElement", false)
			.put("HTMLFrameElement", false)
			.put("HTMLFrameSetElement", false)
			.put("HTMLHeadElement", false)
			.put("HTMLHeadingElement", false)
			.put("HTMLHRElement", false)
			.put("HTMLHtmlElement", false)
			.put("HTMLIFrameElement", false)
			.put("HTMLImageElement", false)
			.put("HTMLInputElement", false)
			/*
			 * HTMLIsIndexElement was removed from the WHATWG HTML spec;
			 * see https://github.com/whatwg/html/pull/1095.
			 * HTMLIsIndexElement has been removed from browsers; see:
			 * • Chromium Removal: https://codereview.chromium.org/96653004/
			 * • Gecko Removal: https://bugzilla.mozilla.org/show_bug.cgi?id=1266495
			 * • WebKit Removal: https://bugs.webkit.org/show_bug.cgi?id=7139.
			 * See also the discussion at https://github.com/jshint/jshint/pull/3222.
			 */
			.put("HTMLIsIndexElement", false)
			.put("HTMLLabelElement", false)
			.put("HTMLLayerElement", false)
			.put("HTMLLegendElement", false)
			.put("HTMLLIElement", false)
			.put("HTMLLinkElement", false)
			.put("HTMLMapElement", false)
			.put("HTMLMarqueeElement", false)
			.put("HTMLMediaElement", false)
			.put("HTMLMenuElement", false)
			.put("HTMLMetaElement", false)
			.put("HTMLMeterElement", false)
			.put("HTMLModElement", false)
			.put("HTMLObjectElement", false)
			.put("HTMLOListElement", false)
			.put("HTMLOptGroupElement", false)
			.put("HTMLOptionElement", false)
			.put("HTMLParagraphElement", false)
			.put("HTMLParamElement", false)
			.put("HTMLPictureElement", false)
			.put("HTMLPreElement", false)
			.put("HTMLProgressElement", false)
			.put("HTMLQuoteElement", false)
			.put("HTMLScriptElement", false)
			.put("HTMLSelectElement", false)
			.put("HTMLSlotElement", false)
			.put("HTMLSourceElement", false)
			.put("HTMLStyleElement", false)
			.put("HTMLTableCaptionElement", false)
			.put("HTMLTableCellElement", false)
			.put("HTMLTableColElement", false)
			.put("HTMLTableElement", false)
			.put("HTMLTableRowElement", false)
			.put("HTMLTableSectionElement", false)
			.put("HTMLTemplateElement", false)
			.put("HTMLTextAreaElement", false)
			.put("HTMLTimeElement", false)
			.put("HTMLTitleElement", false)
			.put("HTMLTrackElement", false)
			.put("HTMLUListElement", false)
			.put("HTMLVideoElement", false)
			.put("history", false)
			.put("Image", false)
			.put("IntersectionObserver", false)
			.put("length", false)
			.put("localStorage", false)
			.put("location", false)
			.put("matchMedia", false)
			.put("MediaList", false)
			.put("MediaRecorder", false)
			.put("MessageChannel", false)
			.put("MessageEvent", false)
			.put("MessagePort", false)
			.put("MouseEvent", false)
			.put("moveBy", false)
			.put("moveTo", false)
			.put("MutationObserver", false)
			.put("name", false)
			.put("Node", false)
			.put("NodeFilter", false)
			.put("NodeList", false)
			.put("Notification", false)
			.put("navigator", false)
			.put("onbeforeunload", true)
			.put("onblur", true)
			.put("onerror", true)
			.put("onfocus", true)
			.put("onload", true)
			.put("onresize", true)
			.put("onunload", true)
			.put("open", false)
			.put("openDatabase", false)
			.put("opener", false)
			.put("Option", false)
			.put("origin", false) // WindowOrWorkerGlobalScope
			.put("parent", false)
			.put("performance", false)
			.put("print", false)
			.put("queueMicrotask", false) // WindowOrWorkerGlobalScope
			.put("Range", false)
			.put("requestAnimationFrame", false)
			.put("removeEventListener", false) // EventTarget
			.put("Request", false)
			.put("resizeBy", false)
			.put("resizeTo", false)
			.put("Response", false)
			.put("screen", false)
			.put("scroll", false)
			.put("scrollBy", false)
			.put("scrollTo", false)
			.put("sessionStorage", false)
			.put("setInterval", false) // WindowOrWorkerGlobalScope
			.put("setTimeout", false) // WindowOrWorkerGlobalScope
			.put("SharedWorker", false)
			.put("status", false)
			.put("Storage", false)
			.put("StyleSheet", false)
			.put("SVGAElement", false)
			.put("SVGAltGlyphDefElement", false)
			.put("SVGAltGlyphElement", false)
			.put("SVGAltGlyphItemElement", false)
			.put("SVGAngle", false)
			.put("SVGAnimateColorElement", false)
			.put("SVGAnimateElement", false)
			.put("SVGAnimateMotionElement", false)
			.put("SVGAnimateTransformElement", false)
			.put("SVGAnimatedAngle", false)
			.put("SVGAnimatedBoolean", false)
			.put("SVGAnimatedEnumeration", false)
			.put("SVGAnimatedInteger", false)
			.put("SVGAnimatedLength", false)
			.put("SVGAnimatedLengthList", false)
			.put("SVGAnimatedNumber", false)
			.put("SVGAnimatedNumberList", false)
			.put("SVGAnimatedPathData", false)
			.put("SVGAnimatedPoints", false)
			.put("SVGAnimatedPreserveAspectRatio", false)
			.put("SVGAnimatedRect", false)
			.put("SVGAnimatedString", false)
			.put("SVGAnimatedTransformList", false)
			.put("SVGAnimationElement", false)
			.put("SVGCSSRule", false)
			.put("SVGCircleElement", false)
			.put("SVGClipPathElement", false)
			.put("SVGColor", false)
			.put("SVGColorProfileElement", false)
			.put("SVGColorProfileRule", false)
			.put("SVGComponentTransferFunctionElement", false)
			.put("SVGCursorElement", false)
			.put("SVGDefsElement", false)
			.put("SVGDescElement", false)
			.put("SVGDocument", false)
			.put("SVGElement", false)
			.put("SVGElementInstance", false)
			.put("SVGElementInstanceList", false)
			.put("SVGEllipseElement", false)
			.put("SVGExternalResourcesRequired", false)
			.put("SVGFEBlendElement", false)
			.put("SVGFEColorMatrixElement", false)
			.put("SVGFEComponentTransferElement", false)
			.put("SVGFECompositeElement", false)
			.put("SVGFEConvolveMatrixElement", false)
			.put("SVGFEDiffuseLightingElement", false)
			.put("SVGFEDisplacementMapElement", false)
			.put("SVGFEDistantLightElement", false)
			.put("SVGFEFloodElement", false)
			.put("SVGFEFuncAElement", false)
			.put("SVGFEFuncBElement", false)
			.put("SVGFEFuncGElement", false)
			.put("SVGFEFuncRElement", false)
			.put("SVGFEGaussianBlurElement", false)
			.put("SVGFEImageElement", false)
			.put("SVGFEMergeElement", false)
			.put("SVGFEMergeNodeElement", false)
			.put("SVGFEMorphologyElement", false)
			.put("SVGFEOffsetElement", false)
			.put("SVGFEPointLightElement", false)
			.put("SVGFESpecularLightingElement", false)
			.put("SVGFESpotLightElement", false)
			.put("SVGFETileElement", false)
			.put("SVGFETurbulenceElement", false)
			.put("SVGFilterElement", false)
			.put("SVGFilterPrimitiveStandardAttributes", false)
			.put("SVGFitToViewBox", false)
			.put("SVGFontElement", false)
			.put("SVGFontFaceElement", false)
			.put("SVGFontFaceFormatElement", false)
			.put("SVGFontFaceNameElement", false)
			.put("SVGFontFaceSrcElement", false)
			.put("SVGFontFaceUriElement", false)
			.put("SVGForeignObjectElement", false)
			.put("SVGGElement", false)
			.put("SVGGlyphElement", false)
			.put("SVGGlyphRefElement", false)
			.put("SVGGradientElement", false)
			.put("SVGHKernElement", false)
			.put("SVGICCColor", false)
			.put("SVGImageElement", false)
			.put("SVGLangSpace", false)
			.put("SVGLength", false)
			.put("SVGLengthList", false)
			.put("SVGLineElement", false)
			.put("SVGLinearGradientElement", false)
			.put("SVGLocatable", false)
			.put("SVGMPathElement", false)
			.put("SVGMarkerElement", false)
			.put("SVGMaskElement", false)
			.put("SVGMatrix", false)
			.put("SVGMetadataElement", false)
			.put("SVGMissingGlyphElement", false)
			.put("SVGNumber", false)
			.put("SVGNumberList", false)
			.put("SVGPaint", false)
			.put("SVGPathElement", false)
			.put("SVGPathSeg", false)
			.put("SVGPathSegArcAbs", false)
			.put("SVGPathSegArcRel", false)
			.put("SVGPathSegClosePath", false)
			.put("SVGPathSegCurvetoCubicAbs", false)
			.put("SVGPathSegCurvetoCubicRel", false)
			.put("SVGPathSegCurvetoCubicSmoothAbs", false)
			.put("SVGPathSegCurvetoCubicSmoothRel", false)
			.put("SVGPathSegCurvetoQuadraticAbs", false)
			.put("SVGPathSegCurvetoQuadraticRel", false)
			.put("SVGPathSegCurvetoQuadraticSmoothAbs", false)
			.put("SVGPathSegCurvetoQuadraticSmoothRel", false)
			.put("SVGPathSegLinetoAbs", false)
			.put("SVGPathSegLinetoHorizontalAbs", false)
			.put("SVGPathSegLinetoHorizontalRel", false)
			.put("SVGPathSegLinetoRel", false)
			.put("SVGPathSegLinetoVerticalAbs", false)
			.put("SVGPathSegLinetoVerticalRel", false)
			.put("SVGPathSegList", false)
			.put("SVGPathSegMovetoAbs", false)
			.put("SVGPathSegMovetoRel", false)
			.put("SVGPatternElement", false)
			.put("SVGPoint", false)
			.put("SVGPointList", false)
			.put("SVGPolygonElement", false)
			.put("SVGPolylineElement", false)
			.put("SVGPreserveAspectRatio", false)
			.put("SVGRadialGradientElement", false)
			.put("SVGRect", false)
			.put("SVGRectElement", false)
			.put("SVGRenderingIntent", false)
			.put("SVGSVGElement", false)
			.put("SVGScriptElement", false)
			.put("SVGSetElement", false)
			.put("SVGStopElement", false)
			.put("SVGStringList", false)
			.put("SVGStylable", false)
			.put("SVGStyleElement", false)
			.put("SVGSwitchElement", false)
			.put("SVGSymbolElement", false)
			.put("SVGTRefElement", false)
			.put("SVGTSpanElement", false)
			.put("SVGTests", false)
			.put("SVGTextContentElement", false)
			.put("SVGTextElement", false)
			.put("SVGTextPathElement", false)
			.put("SVGTextPositioningElement", false)
			.put("SVGTitleElement", false)
			.put("SVGTransform", false)
			.put("SVGTransformList", false)
			.put("SVGTransformable", false)
			.put("SVGURIReference", false)
			.put("SVGUnitTypes", false)
			.put("SVGUseElement", false)
			.put("SVGVKernElement", false)
			.put("SVGViewElement", false)
			.put("SVGViewSpec", false)
			.put("SVGZoomAndPan", false)
			.put("Text", false)
			.put("TextDecoder", false)
			.put("TextEncoder", false)
			.put("TimeEvent", false)
			.put("top", false)
			.put("URL", false)
			.put("URLSearchParams", false)
			.put("WebGLActiveInfo", false)
			.put("WebGLBuffer", false)
			.put("WebGLContextEvent", false)
			.put("WebGLFramebuffer", false)
			.put("WebGLProgram", false)
			.put("WebGLRenderbuffer", false)
			.put("WebGLRenderingContext", false)
			.put("WebGLShader", false)
			.put("WebGLShaderPrecisionFormat", false)
			.put("WebGLTexture", false)
			.put("WebGLUniformLocation", false)
			.put("WebSocket", false)
			.put("window", false)
			.put("Window", false)
			.put("Worker", false)
			.put("XDomainRequest", false)
			.put("XMLDocument", false)
			.put("XMLHttpRequest", false)
			.put("XMLSerializer", false)
			.put("XPathEvaluator", false)
			.put("XPathException", false)
			.put("XPathExpression", false)
			.put("XPathNamespace", false)
			.put("XPathNSResolver", false)
			.put("XPathResult", false)
			.build();

	public static final Map<String, Boolean> devel = ImmutableMap.<String, Boolean>builder()
			.put("alert", false)
			.put("confirm", false)
			.put("console", false)
			.put("Debug", false)
			.put("opera", false)
			.put("prompt", false)
			.build();

	public static final Map<String, Boolean> worker = ImmutableMap.<String, Boolean>builder()
			.put("addEventListener", true) // EventTarget
			.put("atob", true) // WindowOrWorkerGlobalScope
			.put("btoa", true) // WindowOrWorkerGlobalScope
			.put("clearInterval", true) // WindowOrWorkerGlobalScope
			.put("clearTimeout", true) // WindowOrWorkerGlobalScope
			.put("createImageBitmap", true) // WindowOrWorkerGlobalScope
			.put("dispatchEvent", true) // EventTarget
			.put("importScripts", true)
			.put("onmessage", true)
			.put("origin", true) // WindowOrWorkerGlobalScope
			.put("postMessage", true)
			.put("queueMicrotask", true) // WindowOrWorkerGlobalScope
			.put("removeEventListener", true) // EventTarget
			.put("self", true)
			.put("setInterval", true) // WindowOrWorkerGlobalScope
			.put("setTimeout", true) // WindowOrWorkerGlobalScope
			.put("FileReaderSync", true)
			.build();

	// Widely adopted global names that are not part of ECMAScript standard

	public static final Map<String, Boolean> nonstandard = ImmutableMap.<String, Boolean>builder()
			.put("escape", false)
			.put("unescape", false)
			.build();

	// Globals provided by popular JavaScript environments.

	public static final Map<String, Boolean> couch = ImmutableMap.<String, Boolean>builder()
			.put("require", false)
			.put("respond", false)
			.put("getRow", false)
			.put("emit", false)
			.put("send", false)
			.put("start", false)
			.put("sum", false)
			.put("log", false)
			.put("exports", false)
			.put("module", false)
			.put("provides", false)
			.build();

	public static final Map<String, Boolean> node = ImmutableMap.<String, Boolean>builder()
			.put("__filename", false)
			.put("__dirname", false)
			.put("arguments", false)
			.put("GLOBAL", false)
			.put("global", false)
			.put("module", false)
			.put("require", false)
			.put("Intl", false)

			// These globals are writeable because Node allows the following
			// usage pattern: var Buffer = require("buffer").Buffer;

			.put("Buffer", true)
			.put("console", true)
			.put("exports", true)
			.put("process", true)
			.put("setTimeout", true)
			.put("clearTimeout", true)
			.put("setInterval", true)
			.put("clearInterval", true)
			.put("setImmediate", true) // v0.9.1+
			.put("clearImmediate", true) // v0.9.1+
			.put("URL", true) // v10.0.0+
			.put("URLSearchParams", true) // v10.0.0+
			.build();

	public static final Map<String, Boolean> browserify = ImmutableMap.<String, Boolean>builder()
			.put("__filename", false)
			.put("__dirname", false)
			.put("global", false)
			.put("module", false)
			.put("require", false)
			.put("Buffer", true)
			.put("exports", true)
			.put("process", true)
			.build();

	public static final Map<String, Boolean> phantom = ImmutableMap.<String, Boolean>builder()
			.put("phantom", false)
			.put("require", false)
			.put("WebPage", false)
			.put("console", false) // in examples, but undocumented
			.put("exports", false) // v1.7+
			.build();

	public static final Map<String, Boolean> qunit = ImmutableMap.<String, Boolean>builder()
			.put("asyncTest", false)
			.put("deepEqual", false)
			.put("equal", false)
			.put("expect", false)
			.put("module", false)
			.put("notDeepEqual", false)
			.put("notEqual", false)
			.put("notOk", false)
			.put("notPropEqual", false)
			.put("notStrictEqual", false)
			.put("ok", false)
			.put("propEqual", false)
			.put("QUnit", false)
			.put("raises", false)
			.put("start", false)
			.put("stop", false)
			.put("strictEqual", false)
			.put("test", false)
			.put("throws", false)
			.build();

	public static final Map<String, Boolean> rhino = ImmutableMap.<String, Boolean>builder()
			.put("arguments", false)
			.put("defineClass", false)
			.put("deserialize", false)
			.put("gc", false)
			.put("help", false)
			.put("importClass", false)
			.put("importPackage", false)
			.put("java", false)
			.put("load", false)
			.put("loadClass", false)
			.put("Packages", false)
			.put("print", false)
			.put("quit", false)
			.put("readFile", false)
			.put("readUrl", false)
			.put("runCommand", false)
			.put("seal", false)
			.put("serialize", false)
			.put("spawn", false)
			.put("sync", false)
			.put("toint32", false)
			.put("version", false)
			.build();

	public static final Map<String, Boolean> shelljs = ImmutableMap.<String, Boolean>builder()
			.put("target", false)
			.put("echo", false)
			.put("exit", false)
			.put("cd", false)
			.put("pwd", false)
			.put("ls", false)
			.put("find", false)
			.put("cp", false)
			.put("rm", false)
			.put("mv", false)
			.put("mkdir", false)
			.put("test", false)
			.put("cat", false)
			.put("sed", false)
			.put("grep", false)
			.put("which", false)
			.put("dirs", false)
			.put("pushd", false)
			.put("popd", false)
			.put("env", false)
			.put("exec", false)
			.put("chmod", false)
			.put("config", false)
			.put("error", false)
			.put("tempdir", false)
			.build();

	public static final Map<String, Boolean> typed = ImmutableMap.<String, Boolean>builder()
			.put("ArrayBuffer", false)
			.put("ArrayBufferView", false)
			.put("DataView", false)
			.put("Float32Array", false)
			.put("Float64Array", false)
			.put("Int16Array", false)
			.put("Int32Array", false)
			.put("Int8Array", false)
			.put("Uint16Array", false)
			.put("Uint32Array", false)
			.put("Uint8Array", false)
			.put("Uint8ClampedArray", false)
			.build();

	public static final Map<String, Boolean> wsh = ImmutableMap.<String, Boolean>builder()
			.put("ActiveXObject", true)
			.put("Enumerator", true)
			.put("GetObject", true)
			.put("ScriptEngine", true)
			.put("ScriptEngineBuildVersion", true)
			.put("ScriptEngineMajorVersion", true)
			.put("ScriptEngineMinorVersion", true)
			.put("VBArray", true)
			.put("WSH", true)
			.put("WScript", true)
			.put("XDomainRequest", true)
			.build();

	public static final Map<String, Boolean> dojo = ImmutableMap.<String, Boolean>builder()
			.put("dojo", false)
			.put("dijit", false)
			.put("dojox", false)
			.put("define", false)
			.put("require", false)
			.build();

	public static final Map<String, Boolean> jquery = ImmutableMap.<String, Boolean>builder()
			.put("$", false)
			.put("jQuery", false)
			.build();

	public static final Map<String, Boolean> mootools = ImmutableMap.<String, Boolean>builder()
			.put("$", false)
			.put("$$", false)
			.put("Asset", false)
			.put("Browser", false)
			.put("Chain", false)
			.put("Class", false)
			.put("Color", false)
			.put("Cookie", false)
			.put("Core", false)
			.put("Document", false)
			.put("DomReady", false)
			.put("DOMEvent", false)
			.put("DOMReady", false)
			.put("Drag", false)
			.put("Element", false)
			.put("Elements", false)
			.put("Event", false)
			.put("Events", false)
			.put("Fx", false)
			.put("Group", false)
			.put("Hash", false)
			.put("HtmlTable", false)
			.put("IFrame", false)
			.put("IframeShim", false)
			.put("InputValidator", false)
			.put("instanceOf", false)
			.put("Keyboard", false)
			.put("Locale", false)
			.put("Mask", false)
			.put("MooTools", false)
			.put("Native", false)
			.put("Options", false)
			.put("OverText", false)
			.put("Request", false)
			.put("Scroller", false)
			.put("Slick", false)
			.put("Slider", false)
			.put("Sortables", false)
			.put("Spinner", false)
			.put("Swiff", false)
			.put("Tips", false)
			.put("Type", false)
			.put("typeOf", false)
			.put("URI", false)
			.put("Window", false)
			.build();

	public static final Map<String, Boolean> prototypejs = ImmutableMap.<String, Boolean>builder()
			.put("$", false)
			.put("$$", false)
			.put("$A", false)
			.put("$F", false)
			.put("$H", false)
			.put("$R", false)
			.put("$break", false)
			.put("$continue", false)
			.put("$w", false)
			.put("Abstract", false)
			.put("Ajax", false)
			.put("Class", false)
			.put("Enumerable", false)
			.put("Element", false)
			.put("Event", false)
			.put("Field", false)
			.put("Form", false)
			.put("Hash", false)
			.put("Insertion", false)
			.put("ObjectRange", false)
			.put("PeriodicalExecuter", false)
			.put("Position", false)
			.put("Prototype", false)
			.put("Selector", false)
			.put("Template", false)
			.put("Toggle", false)
			.put("Try", false)
			.put("Autocompleter", false)
			.put("Builder", false)
			.put("Control", false)
			.put("Draggable", false)
			.put("Draggables", false)
			.put("Droppables", false)
			.put("Effect", false)
			.put("Sortable", false)
			.put("SortableObserver", false)
			.put("Sound", false)
			.put("Scriptaculous", false)
			.build();

	public static final Map<String, Boolean> yui = ImmutableMap.<String, Boolean>builder()
			.put("YUI", false)
			.put("Y", false)
			.put("YUI_config", false)
			.build();

	public static final Map<String, Boolean> mocha = ImmutableMap.<String, Boolean>builder()
			// Global (for config etc.)
			.put("mocha", false)
			// BDD
			.put("describe", false)
			.put("xdescribe", false)
			.put("context", false)
			.put("xcontext", false)
			.put("it", false)
			.put("xit", false)
			.put("specify", false)
			.put("xspecify", false)
			.put("before", false)
			.put("after", false)
			.put("beforeEach", false)
			.put("afterEach", false)
			// TDD
			.put("suite", false)
			.put("test", false)
			.put("setup", false)
			.put("teardown", false)
			.put("suiteSetup", false)
			.put("suiteTeardown", false)
			.build();

	public static final Map<String, Boolean> jasmine = ImmutableMap.<String, Boolean>builder()
			.put("jasmine", false)
			.put("describe", false)
			.put("xdescribe", false)
			.put("it", false)
			.put("xit", false)
			.put("beforeEach", false)
			.put("afterEach", false)
			.put("setFixtures", false)
			.put("loadFixtures", false)
			.put("spyOn", false)
			.put("expect", false)
			// Jasmine 1.3
			.put("runs", false)
			.put("waitsFor", false)
			.put("waits", false)
			// Jasmine 2.1
			.put("beforeAll", false)
			.put("afterAll", false)
			.put("fail", false)
			.put("fdescribe", false)
			.put("fit", false)
			.put("pending", false)
			// Jasmine 2.6
			.put("spyOnProperty", false)
			.build();
}